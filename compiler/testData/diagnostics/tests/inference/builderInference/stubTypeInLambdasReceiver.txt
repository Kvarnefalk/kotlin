package

public fun main(): kotlin.Unit
public fun </*0*/ Value : kotlin.Any> makeCodec(/*0*/ @kotlin.BuilderInference configure: CodecBuilder<Value>.() -> kotlin.Unit): kotlin.Unit

public interface CodecBuilder</*0*/ Value : kotlin.Any> {
    public abstract fun decode(/*0*/ fn: (value: kotlin.String) -> Value): kotlin.Unit
    public abstract fun encode(/*0*/ fn: Value.(value: kotlin.String) -> kotlin.Unit): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final data class Foo {
    public constructor Foo(/*0*/ bar: kotlin.String)
    public final val bar: kotlin.String
    public final operator /*synthesized*/ fun component1(): kotlin.String
    public final /*synthesized*/ fun copy(/*0*/ bar: kotlin.String = ...): Foo
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}
