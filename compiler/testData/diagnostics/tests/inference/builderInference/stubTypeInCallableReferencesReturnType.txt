package

public fun </*0*/ S> generate(/*0*/ @kotlin.BuilderInference g: suspend GenericController<S>.() -> kotlin.Unit): kotlin.collections.List<S>
public fun main(): kotlin.Unit
public suspend fun </*0*/ T> GenericController<T>.foo5(/*0*/ t: T): kotlin.Unit
public fun </*0*/ T> GenericController<T>.foo6(/*0*/ t: T): kotlin.Unit
public suspend fun </*0*/ T> GenericController<T>.foo7(/*0*/ t: T): T
public fun </*0*/ T> GenericController<T>.foo8(): T

public final class GenericController</*0*/ T> {
    public constructor GenericController</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final suspend fun foo1(/*0*/ t: T): kotlin.Unit
    public final fun foo2(/*0*/ t: T): kotlin.Unit
    public final suspend fun foo3(/*0*/ t: T): T
    public final fun foo4(): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
